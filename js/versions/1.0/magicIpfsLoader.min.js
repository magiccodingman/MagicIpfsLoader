const CACHE_NAME="virtual-cache-v1";let virtualFileSystem={};function getContentType(e){let t=e.split(".").pop().toLowerCase();return({js:"application/javascript",wasm:"application/wasm",json:"application/json",pdb:"application/octet-stream",pdf:"application/pdf",xml:"application/xml",zip:"application/zip",jsonld:"application/ld+json",dll:"application/octet-stream",eot:"application/vnd.ms-fontobject",docx:"application/msword",otf:"font/otf",ttf:"font/ttf",woff:"font/woff",woff2:"font/woff2",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",ico:"image/x-icon",svg:"image/svg+xml",webp:"image/webp",mp3:"audio/mpeg",ogg:"audio/ogg",wav:"audio/wav",mp4:"video/mp4",webm:"video/webm",css:"text/css",html:"text/html",htm:"text/html",csv:"text/csv"})[t]||"application/octet-stream"}self.addEventListener("install",e=>{console.log("Service Worker: Install Event"),self.skipWaiting()}),self.addEventListener("activate",e=>{let t=[CACHE_NAME];e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(!t.includes(e))return caches.delete(e)}))).then(()=>self.clients.claim()))}),self.addEventListener("message",e=>{if("SET_VIRTUAL_FS"===e.data.type)null===virtualFileSystem||0===Object.keys(virtualFileSystem).length?(console.log("The variable is either null or an empty object."),virtualFileSystem=e.data.virtualFileSystem,console.log("Service Worker: Virtual file system set:",virtualFileSystem)):console.log("The object is not empty."),e.source.postMessage({type:"VIRTUAL_FS_SET"});else if("CHECK_VIRTUAL_FS"===e.data.type){let t=null===virtualFileSystem||0===Object.keys(virtualFileSystem).length;e.source.postMessage({type:"VIRTUAL_FS_STATUS",isEmpty:t})}}),self.addEventListener("fetch",e=>{if(null===virtualFileSystem||0===Object.keys(virtualFileSystem).length){console.log("skip cache and fetch due to empty directory");return}let t=new URL(e.request.url);if(console.log(`Service Worker: Intercepting request for: ${t.pathname}`),t.origin===location.origin||"virtual:"===t.protocol){let i=t.pathname.startsWith("/")?t.pathname.substring(1):t.pathname;if(i=i.startsWith("virtual://")?i.replace("virtual://",""):i,console.log(`Service Worker: Processed pathname: ${i}`),virtualFileSystem[i]){console.log(`Service Worker: Serving ${i} from virtual directory`),e.respondWith(new Response(virtualFileSystem[i],{headers:{"Content-Type":getContentType(i)}}));return}console.warn(`Service Worker: File ${i} not found in virtual directory`)}else console.log(`Service Worker: Request for ${t.pathname} does not match origin or virtual protocol.`);e.respondWith(caches.match(e.request).then(t=>t?(console.log(`Service Worker: Serving ${e.request.url} from cache`),t):fetch(e.request).then(t=>caches.open(CACHE_NAME).then(i=>(console.log(`Service Worker: Caching new resource: ${e.request.url}`),i.put(e.request,t.clone()),t)))).catch(e=>(console.error("Service Worker: Fetch failed; returning offline page instead.",e),caches.match("offline.html"))))});
